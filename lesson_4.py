"""1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами."""
from sys import argv

argv = script_name, hours, rate, bonus
print('Показатели работника:')
print('Выработка: ', hours)
print('Ставка: ', rate)
print('Премия: ', bonus)
print('Зарплата: ', int(hours) * int(rate) + int(bonus))

"""2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]."""
list_1 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
def gen_1(list_1):
    list_2 = []
    for i in list_1[1:]:
        a = list_1[list_1.index(i) - 1]
        if i > a:
            list_2.append(i)
        else:
            continue
    yield list_2

if __name__ =='__main__':
    gen_1(list_1)


"""3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""
numbers = [a for a in range(20, 241) if a % 20 == 0 or a % 21 == 0]
print(numbers)

"""4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]"""
list_1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list_2 = [a for a in list_1 if list_1.count(a) == 1]
print('Результирующий список: ', list_2)

"""5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка."""
from functools import reduce

my_list = [el for el in range(100, 1001) if el % 2 == 0]
# решение без reduce
for el in my_list:
    if my_list.index(el) == 0:
        result = el
    else:
        result = result * el
print('Произведение элементов последовательности: ', result)

#решение с reduce
def multipl(previous_element, element):
    return previous_element * element

result = reduce(multipl, my_list)
print('Произведение элементов последовательности: ', result)

"""6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено."""
from itertools import count, cycle

# итератор, генерирующий целые числа, начиная с указанного
start = 25
for el in count(start):
    if el > start + 20:
        break
    print(el)

# итератор,  повторяющий элементы некоторого списка, определенного заранее
my_string = ('Nullum est jam dictum, quod non sit dictum prius.')
count = 0
for el in cycle(my_string):
    count += 1
    if count < 50:
        print(el)
    else:
        break


"""7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!."""
from math import factorial

def fact(n):
    for i in range(1, n+1):
        if i < n+1:
            result = factorial(i)
            yield result
        else:
            break

for el in fact(5):
    print(el)

